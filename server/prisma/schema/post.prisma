model Post {
  id        String   @id @default(uuid()) @map("post_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  mediaFiles MediaFile[]

  reposts Repost[]

  // Link to the root post in the thread
  rootPost   Post?   @relation("ThreadRoot", fields: [rootPostId], references: [id])
  rootPostId String? @map("root_post_id") // ID of the root post in the thread

  // Link to the parent post
  parentPost   Post?   @relation("PostReplies", fields: [parentPostId], references: [id])
  parentPostId String? @map("parent_post_id")

  // Replies to this post
  replies Post[] @relation("PostReplies")

  // All posts that reference this post as the root
  threadPosts Post[] @relation("ThreadRoot")

  // Social interactions
  likes     PostLikeRelation[]     @relation("LikedPost")
  bookmarks PostBookmarkRelation[] @relation("BookmarkedPost")

  @@map("post")
}

model MediaFile {
  id        String   @id @default(uuid()) @map("media_file_id")
  url       String   @unique
  publicId  String   @unique @map("provider_id")
  mimetype  String   @map("mime_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @map("post_id")

  @@map("media_file")
}

model Repost {
  id        String   @id @default(uuid()) @map("repost_id")
  text      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@map("repost")
}
